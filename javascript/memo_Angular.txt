
■ フォーカスが外れたら元の値、それ以外はカンマ区切りの値をテキストボックスに表示する

・フォーカスが外れたらフォーマットに沿った表示にする。
  https://swfz.hatenablog.com/entry/2017/08/29/021723
  attribute directiveを使用して実装する。
  フォーカスベントを取るには、attribute directiveのメソッドにHostListener(blur, focus)をデコレートする。

・How to format input text value to currency on angular 4 on lost focus?
  https://stackoverflow.com/questions/45794381/how-to-format-input-text-value-to-currency-on-angular-4-on-lost-focus
  attribute directiveではなく、テンプレートに対応するコンポーネントで処理する。
  テンプレートから $eventを渡し、それをHtmlElement型のelementで受け、element.target.value の値を書き換えることで実現する。


・How to use pipes in Angular 5 reactive form input
  https://stackoverflow.com/questions/49522542/how-to-use-pipes-in-angular-5-reactive-form-input
  テンプレートで以下のようにする。とてもシンプル
  formControlName="amount" [value]="myForm.get('amount').value | udpCurrency"
  ※ フォーカスが外れたら、という観点はない。

・Use pipe number In Input text
  https://stackoverflow.com/questions/51360650/use-pipe-number-in-input-text
  [ngModel]="price | number" は使用できないが、カスタムパイプならOK.
  なのでカスタムパイプを作成する。



■ リファレンス

[HostListener]
・DOMのイベントを補足して、メソッドに渡すデコレーター。
  用途: attribute directiveに使用する。

・公式
  https://angular.io/api/core/HostListener


[$eventオブジェクト]
・公式
  https://angular.jp/guide/user-input#event%E3%81%AE%E5%9E%8B

・用途
  attribute directiveでHostListenerの第二引数に渡す値に用いる。
  ※ テンプレートから値を渡す場合は、テンプレート参照変数を使用すれば良い。

[テンプレート参照変数] template reference variable
・概要
  テンプレートの値を簡単にコンポーネントに送ることができる。

・例
  <input #t1 type="text" (keyup)="onKeyup(t1.value)">
  → t1というテンプレート参照変数を定義し、keyupイベントの際にonkeyup()に渡す。

  コンポーネントでは下記のように受け取り、使用する。
  onKeyup(s: string){
    console.log(s);
  }

・Angular入門
  https://angular.keicode.com/basics/template-reference-variables.php

・公式
  https://angular.io/guide/user-input
  template reference variableで検索




[RxJS]
・RxJS
https://rxjs-dev.firebaseapp.com/guide/observable

・ https://angular.jp/tutorial/toh-pt4のgetHeroes()はなぜof(HEROES)を返すのか？
Answer: Observableを返すから。
https://stackoverflow.com/questions/47889210/why-we-should-use-rxjs-of-function


【コマンド】
■ TypeScript文法

// プロパティの宣言
[public / private] プロパティ名: データ型;
private messageService: MessageService;
private message: string;
private messages: string[];

■ コマンド

// ヘルプ
ng help

// ワークスペースを新規作成
ng new <workspace_name>

// コンポーネントを作成する。
ng generate component <component_name>

// ビルドしてサーバを起動する
ng serve --open

// コマンドの詳細を見る(angularワークスペース内でないと使用できない。なぜ？)
ng serve --help

■ 文法
[バインディング]

// 変数バインディング
htmlファイル内で{{ クラス変数名 }}
<span>{{<クラス変数名>}}</span>
<span>{{name}}</span>

// イベントバインディング
<li (click)="<クラスメソッド名(引数)>">click</li>
<li (click)="onSelect(hero)">click</li>

//プロパティバインディング
ビューエレメントのプロパティに値を設定する
<img [src]="heroImageUrl">
<button [disabled]="isUnchanged">Cancel is disabled</button>

// (CSSの)クラスバインディング(式を使う)
[class.class-name]="式"
<div [class.special]="isSpecial">The class binding is special</div>
<div class="special" [class.special]="!isSpecial">This one is not so special</div>

// 一般的なクラス指定
<div class="bad curly special">Bad curly special</div>

// クラスをバインディングでリネームする
<div class="bad curly special" [class]="badCurly">Bad curly</div>

// 双方向バインディング
<input [(ngModel)]="<クラス変数名>"/>
<input [(ngModel)]="selectedHero.name" placeholder="name" />

// 入力バインディング
https://angular.jp/guide/component-interaction

@input() で変数をデコレートする。
export class HeroChildComponent {
  @Input() hero: Hero;
}

子コンポーネントの@input()でデコレートされたプロパティheroにデータを渡す。
<app-hero-child *ngFor="let tmp of heroes" [hero]="tmp" > </app-hero-child>


// NgModule
@NgModuleデコレーターが付与されたクラス(例： app.module.ts)
declarations： このモジュールに属するコンポーネントやディレクティブ
imports: このモジュールが使用するほかのモジュール

[構造ディレクティブ]
// *ngFor
繰り返しディレクティブ
<li *ngFor="let hero of heroes">
    {{hero.id}}: {{hero.name}}
</li>

[ルートの登録]
Routesにパスとコンポーネントの対応を登録する。
RouterModule.forRoot()の引数にそれを入れることで、パスとコンポーネントの対応を登録できる。

■ 型定義ファイル

・例
"@types/jasmine": "~2.8.6",
"@types/jasminewd2": "~2.0.3",
"@types/node": "~8.9.4",

素のJavascriptで使用されることを前提に作られたライブラリに対して、TypeScript用の型を定義するもの。

・例えばJqueryの型定義ファイルをインストールするときは以下となる。
npm install @types/jquery --save-dev

・例
xxx.d.ts



